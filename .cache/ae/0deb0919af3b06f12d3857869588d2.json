{"id":"node_modules/core-js/modules/es.string.split.js","dependencies":[{"name":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\package.json","includedInParent":true,"mtime":1663699546899},{"name":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1663699255162},{"name":"../internals/function-apply","loc":{"line":2,"column":20,"index":34},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\function-apply.js"},{"name":"../internals/function-call","loc":{"line":3,"column":19,"index":85},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\function-call.js"},{"name":"../internals/function-uncurry-this","loc":{"line":4,"column":26,"index":142},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\function-uncurry-this.js"},{"name":"../internals/fix-regexp-well-known-symbol-logic","loc":{"line":5,"column":44,"index":225},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\fix-regexp-well-known-symbol-logic.js"},{"name":"../internals/an-object","loc":{"line":6,"column":23,"index":300},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\an-object.js"},{"name":"../internals/is-null-or-undefined","loc":{"line":7,"column":32,"index":359},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\is-null-or-undefined.js"},{"name":"../internals/is-regexp","loc":{"line":8,"column":23,"index":420},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\is-regexp.js"},{"name":"../internals/require-object-coercible","loc":{"line":9,"column":37,"index":484},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\require-object-coercible.js"},{"name":"../internals/species-constructor","loc":{"line":10,"column":33,"index":559},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\species-constructor.js"},{"name":"../internals/advance-string-index","loc":{"line":11,"column":33,"index":629},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\advance-string-index.js"},{"name":"../internals/to-length","loc":{"line":12,"column":23,"index":690},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\to-length.js"},{"name":"../internals/to-string","loc":{"line":13,"column":23,"index":740},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\to-string.js"},{"name":"../internals/get-method","loc":{"line":14,"column":24,"index":791},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\get-method.js"},{"name":"../internals/array-slice-simple","loc":{"line":15,"column":25,"index":844},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\array-slice-simple.js"},{"name":"../internals/regexp-exec-abstract","loc":{"line":16,"column":29,"index":909},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\regexp-exec-abstract.js"},{"name":"../internals/regexp-exec","loc":{"line":17,"column":25,"index":972},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\regexp-exec.js"},{"name":"../internals/regexp-sticky-helpers","loc":{"line":18,"column":28,"index":1029},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\regexp-sticky-helpers.js"},{"name":"../internals/fails","loc":{"line":19,"column":20,"index":1088},"parent":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\modules\\es.string.split.js","resolved":"C:\\Users\\mibe0521\\Desktop\\yandex_practicum\\yandex_practicum\\node_modules\\core-js\\internals\\fails.js"}],"generated":{"js":"'use strict';\nvar apply = require('../internals/function-apply');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar isRegExp = require('../internals/is-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar getMethod = require('../internals/get-method');\nvar arraySlice = require('../internals/array-slice-simple');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar fails = require('../internals/fails');\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\nvar MAX_UINT32 = 0xFFFFFFFF;\nvar min = Math.min;\nvar $push = [].push;\nvar exec = uncurryThis(/./.exec);\nvar push = uncurryThis($push);\nvar stringSlice = uncurryThis(''.slice);\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    // eslint-disable-next-line regexp/no-empty-group -- required for testing\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = toString(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return call(nativeSplit, string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = call(regexpExec, separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          push(output, stringSlice(string, lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !exec(separatorCopy, '')) push(output, '');\n      } else push(output, stringSlice(string, lastLastIndex));\n      return output.length > lim ? arraySlice(output, 0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.es/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = isNullOrUndefined(separator) ? undefined : getMethod(separator, SPLIT);\n      return splitter\n        ? call(splitter, separator, O, limit)\n        : call(internalSplit, toString(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (string, limit) {\n      var rx = anObject(this);\n      var S = toString(string);\n      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);\n\n      if (res.done) return res.value;\n\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (UNSUPPORTED_Y ? 'g' : 'y');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;\n        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          push(A, stringSlice(S, p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            push(A, z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      push(A, stringSlice(S, p));\n      return A;\n    }\n  ];\n}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);\n"},"sourceMaps":null,"error":null,"hash":"f1b29a3004d85528fc52a7b9d766eae8","cacheData":{"env":{}}}